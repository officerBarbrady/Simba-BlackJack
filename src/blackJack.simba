program blackJack;

type Tcard = record
  cardType, name: string;
  value: Integer;
  active: Boolean;
  index:Integer;
end;

type player = record
  name:string;
  cash:Int64;
  wins, losses:Integer;
  cards:TIntegerArray;
end;

type gameBoard = record
  main, menu, load, new:TForm;
  menuLabels:Array[0..4] of TLabel;
  loadPlayerLabels:Array[0..1] of TLabel;
  playerInfo:Array[0..3] of TLabel;
  newPlayerLabel:TLabel;
  loadedPlayers:TListBox;
end;

type textField = record
  newEdit:TEdit;
  playerOptions:Array[0..2] of TLabel;
  newGameLabels:Array[0..1] of TLabel;
end;

type myBitmaps = record
  cardBitmaps: Array of TImage;
  bmps0: Array of TMufasaBitmap;
  bmp0: Array of TBitmap;
  cashBitmap:TImage;
  cashBmps0:TMufasaBitmap;
  cashBmp0:TBitmap;
end;

type gameObject = record
  myCards:Array of TShape;
  cardLetters:array of Array of TLabel; //pwned
  pictures:myBitmaps;
  cashLabel:TLabel;
end;

type
  TCardArray  = array[0..51] of TCard;

var
  TDeck:TCardArray;
  validCards:TIntegerArray;
  names, types:TStringArray;
  myPlayer:player;
  myBoard:gameBoard;
  gameGraphics:gameObject;
  textFields:textField;
  inGame:Boolean;

procedure loadBMP;
begin
  gameGraphics.pictures.cashBmps0 := getMufasaBitmap(BitmapFromString(31, 31, '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'));
end;

procedure freeBMP;
begin
  try
    FreeBitmap(gameGraphics.pictures.cashbmps0);
    FreeBitmap(gameGraphics.pictures.cashBmp0);
    FreeBitmap(gameGraphics.pictures.cashBitmap);
  except
    Writeln('Bitmaps already freed!');
  end;
end;
function getValue(card:string):Integer;
begin
  case card of
    '2': result := 2;
    '3': result := 3;
    '4': result := 4;
    '5': result := 5;
    '6': result := 6;
    '7': result := 7;
    '8': result := 8;
    '9': result := 9;
    '10', 'Jack', 'Queen','King': result := 10;
    'Ace': result := 11;
  end;
end;

function TIADelete(var TIA: TIntegerArray; x: Integer): Boolean;
var
  i, h: Integer;
begin
  h := High(TIA);
  Result := ((x <= h) and (x > -1));
  if not Result then
    Exit;
  for i := x to (h - 1) do
    TIA[i] := TIA[(i + 1)];
  SetLength(TIA, h);
end;

procedure TIAAppend(var TIA: TIntegerArray; x: Integer);
var
  aL: Integer;
begin
  aL := (Length(TIA) + 1);
  SetLength(TIA, aL);
  TIA[(aL - 1)] := Integer(x);
end;

procedure initValid;
var
  i:Integer;
begin
  setLength(validCards, 52);
  for i := 0 to high(validCards) do
    validCards[i] := i;
end;

procedure loadDeck;
var
  i, l, j: Integer;
begin
  for i := 0 to high(Names) do
  begin
    for l := 0 to high(Types) do
    begin
      TDeck[(i + j)].cardType := Types[l];
      TDeck[(i + j)].name := Names[i];
      TDeck[(i + j)].value := getValue(Names[i]);
      TDeck[(i + j)].index := (i + j);
      j := j + 1;
    end;
    j := j - 1
  end;
end;

function Count(s, str: string): Integer;
var
  p, sL: Integer;
begin
  Result := 0;
  sL := Length(s);
  p := (p - (sL - 1));
  if (sL <= Length(str)) then
  repeat
    p := PosEx(s, str, (p + sL));
    if (p > 0) then
      Inc(Result);
  until (p <= 0);
end;

function strToArr(str:string):TIntegerArray;
var
  i:Integer;
  placeHolder:string;
  strArr:TStringArray;
begin
  setLength(strArr, count(',', str));
  setLength(result, length(strArr));
  for i := 0 to high(strArr) do
  begin
    strArr[i] := Between('[' + placeHolder, ',', str);
    placeHolder := placeHolder + strArr[i] + ',';
    try
      result[i] := StrToInt(Replace(strArr[i], ']', '', [rfReplaceAll]));
    except
      result := [];
      exit;
    end;
  end;
end;

function randomCard:TCard;
begin
  result := TDeck[random(52)];
end;

procedure drawCards();
var
  index:Integer;
begin
  index := random(length(validCards));
  TIAAppend(myPlayer.cards, validCards[index]);
  TIADelete(validCards, index);
end;

function cardTotal(cardArray:TIntegerArray):Integer;
var
  aceCount, i:Integer;
begin
  for i := 0 to high(cardArray) do
    result := result + TDeck[cardArray[i]].value;
  for i := 0 to high(cardArray) do
  begin
    if (TDeck[cardArray[i]].name = 'Ace') then
      aceCount := aceCount + 1;
  end;
  if (result > 21) then
  begin
    for i := 0 to (aceCount - 1) do
    begin
      result := result - 10;
      if (result <= 21) then
        exit;
    end;
  end;
end;

function cashString():String;
begin
  result := ToStr(myPlayer.cash);
  if ((myPlayer.cash > 99999) and (myPlayer.cash < 9999999)) then
    result := ToStr((Round(myPlayer.cash / 1000))) + 'K';
  if ((myPlayer.cash > 9999999) and (myPlayer.cash < 9999999999)) then
    result := ToStr((Round(myPlayer.cash / 1000000))) + 'M';
  if ((myPlayer.cash > 9999999999) and (myPlayer.cash < 9999999999999)) then
    result := ToStr((Round(myPlayer.cash / 1000000000))) + 'B';
  if ((myPlayer.cash > 9999999999999) and (myPlayer.cash <= 9999999999999999)) then
    result := ToStr((Round(myPlayer.cash / 1000000000000))) + 'T';
  if ((myPlayer.cash > 9999999999999999) and (myPlayer.cash <=9223372036854775807)) then
    result := ToStr((Round(myPlayer.cash / 1000000000000000))) + 'Q';
end;

function blackJack(cardArray:TIntegerArray):boolean;
begin
  result := (cardTotal(cardArray) = 21);
end;

function saveGame():boolean;
var
  tempFile:Integer;
begin
  tempFile := RewriteFile(appPath + 'BlackJack\' + myPlayer.name + '.txt', True);
  try
    WriteFileString(tempFile,'[cash=]' + Int64ToStr(myPlayer.cash) + '[/cash]');
    WriteFileString(tempFile, '[name=]' + myPlayer.name + '[/name]');
    WriteFileString(tempFile, '[wins=]' + ToStr(myPlayer.wins) + '[/wins]');
    WriteFileString(tempFile, '[losses=]' + ToStr(myPlayer.losses) + '[/losses]');
   // WriteFileString(tempFile, '[cards=]' + ToStr(myPlayer.cards) + ',' + '[/cards]');
    WriteFileString(tempFile, '[inGame=]' + ToStr(inGame) + '[/inGame]');
    result := true;
  except
    Writeln('Error saving game');
    result := false;
  finally
    closeFile(tempFile);
  end;
end;

function loadGame(playerName:string):boolean;
var
  info:string;
  tmpFile:Integer;
begin
  tmpFile := openFile(appPath + 'BlackJack\' + playerName + '.txt', true);
  try
    ReadFileString(tmpFile, info, 250);
    myPlayer.cash := StrToInt64(Between('[cash=]', '[/cash]', info));
    myPlayer.name := Between('[name=]', '[/name]', info);
    myPlayer.wins := StrToInt(Between('[wins=]', '[/wins]', info));
    myPlayer.losses := StrToInt(Between('[losses=]', '[/losses]', info));
  //  myPlayer.cards := strToArr(Between('[/losses][cards=]', '[/cards]', info));
    result := true;
  except
    result := false;
  finally
    closeFile(tmpFile);
  end;
end;

procedure startGame();
begin
  myPlayer.cash := random(90000000) + 5000000;
  saveGame();
  Writeln('====================================');
  Writeln('Starting cash: ' + ToStr(myPlayer.cash));
//  BetProc('Enter bet', 'Enter starting bet');
end;

function findFile(path, ext, name:string):boolean;
var
  s:TStringArray;
  i:Integer;
begin
  s := GetFiles(path, ext);
  for i := 0 to high(s) do
    result := (s[i] = (name +'.' + ext));
end;

procedure newPlayer();
begin
  myBoard.new.SHOWMODAL;
end;

procedure resetPlayer();
begin
  myPlayer.name := '';
  myPlayer.cash := 0;
  myPlayer.wins := 0;
  myPlayer.losses := 0;
  myPlayer.cards := [];
end;

procedure namePlayer(sender:TObject);
begin
  if (sender = myBoard.newPlayerLabel) then
  begin
    if (textFields.newEdit.text = '') then
    begin
      MessageBox('You must enter in a name!', 'Error', 0);
      exit;
    end;
    case findFile(appPath + 'BlackJack\' + textFields.newEdit.TEXT, 'txt', textFields.newEdit.TEXT) of
      True: MessageBox('Player name already exists!', 'Error', 8);
      False:
      begin
        myPlayer.name := textFields.newEdit.TEXT;
        myPlayer.cash := random(90000000) + 5000000;
        if saveGame() then
        begin
          writeLn('Successfully saved: ' + appPath + 'BlackJack\' + myPlayer.name + '.txt');
          myBoard.new.CLOSE;
        end;
      end;
    end;
    resetPlayer();
  end;
end;

procedure updateFiles();
var
  tsa:TStringArray;
  i:Integer;
begin
  tsa := Getfiles(AppPath + 'BlackJack\', 'txt');
  myBoard.loadedPlayers.ITEMS.Clear;
  for i := 0 to high(tsa) do
    myBoard.loadedPlayers.ITEMS.Add(replace(tsa[i], '.txt', '', [rfReplaceAll]));
end;

procedure loadPlayers();
begin
  updateFiles();
  myBoard.load.SHOWMODAL;

end;

procedure dispStats(sender:TObject);
var
  i:Integer;
begin
  if (myBoard.loadedPlayers.ITEMINDEX > - 1) then
  begin
    loadGame(myBoard.loadedPlayers.ITEMS.Strings[myBoard.loadedPlayers.ITEMINDEX]);
    myBoard.playerInfo[0].caption := 'Cash: ' + ToStr(myPlayer.cash);
    myBoard.playerInfo[1].caption := 'Wins: ' + ToStr(myPlayer.wins);
    myBoard.playerInfo[2].caption := 'Losses: ' + ToStr(myPlayer.losses);
    for i := 0 to high(myBoard.playerInfo) do
      myBoard.playerInfo[i].Visible := true;
    resetPlayer();
  end;
end;

function getCardColor(id:Integer):Integer;
begin
  case TDeck[id].cardType of
    'Spades','Clubs': result := 0;
    'Hearts','Diamands': result := 255;
  end;
end;

function firstLetter(str:string):string;
begin
  result := str[1];
  if (str = '10') then
    result := '10';
end;

function getCardImage(index:Integer):TMufasaBitmap;
begin
  case TDeck[index].cardType of
    'Clubs': result := getMufasaBitmap(BitmapFromString(24, 24, 'meJytlC+owlAUxl/QyeJYsEzjqs' + 'U0cUEMCqLVOBg8tqVZJiKibRaLiEGDXSyioH3VJhhExGAXNfgnqAc' + 'HY+jufZenX9rZ/c6Pe86999zvSFmWpWkay7J+vz+RSLRaLbQXqXq9' + '/vOmWCx2Pp/JIcPh8B1iKx6Pk3OCwSCKA5pMJiSQ4/GIgYBqtRoJZ' + '7PZfIUDwnNM0yTk5PN5DOdwOKAS4YDC4bDjTKfTKIggCBzHOaGiKJ' + 'fLxYY0m018IXhFo9Hr9bpcLj+B2CoWi9Vq9XNOIBCAej/ngJLJ5Fc' + '45XIZb1BVNZfL4T0+n2+xWGAMPM+v12u4wLquY2yFQgHOvVKpeK6G' + 'QqH5fN5ut1OpFNgymYynLRKJOMOk0+nA3tyrkiTt93tYMgwDQtvW6' + '/UYhnHbstksvOuXWz2dTmF8DQYD97CiaRr8/X7f+TObzRqNRrfb3e' + '12hA+tVCo5jbrdboRZLxqPx+4SYET/A+J5H0RRXK1Wf+aeTifoJDS' + 'WoijMKUNvoY3b7RbFkWVZego+fp/yDEF2OBqNnNwHRD70iw=='));
    'Spades': result := getMufasaBitmap(BitmapFromString(19, 25, 'meJydkzHLglAUhi8VEdFvCNvsI6' + 'LGxqQpmpqaokGS1oYWwUz8C0E0NDQ2S2CLNqSE9BccMqQlcG6oDl4' + '+CVPTnunec+4Det57n89QNptNeDOKTqdzPp+TWpZlIYTG43FSsdfr' + 'IRfbtuNb2+0W/dNsNmNax+MxlUqhNwaDwVfrdDoVCgX0wWQyibA0T' + 'cvn858WhmGYQGu/32cymTAL0+12fZaqqtGKB4TrWYZh+KYRDU3TWK' + 'xWq/EtDOS1Wq2SWkCj0WBZ9gcRubfxN5Hn+bBWvV4vlUqBrWw2e71' + 'eA0fa7/dHo5Gu64Hd6XQKU1UUJZ1Ov9c5joM6SZKQ1OFwIAjivdtu' + 't70oHccRBIF3MU0TF+HMbDbD68Vigbu73S76ti+XSxAh4uhjPu73e' + '7FYxB8mSVJ8sdVqeX+Uy+XgrX1VbrcbRVG+GcJbk2U58Pzj8Viv18' + 'PhMCxToFariaJ4uVw8az6f/7mQLuVyGW9hgSu+baVSAesF3eC7Og=='));
    'Hearts': result := getMufasaBitmap(BitmapFromString(21, 24, 'meJz7/x8E/v3719PzuqzsaV7eg4' + 'aGV8+e/fqPAaZMeVNS8iQj4zFQwbVrP+Dix49/lZC4wcBwBRktWvQ' + 'eruDMmW+qqrfQFLS1vQBKffr0i4/vKpoUBK1b9wmo4N27X0JC17Aq' + 'WLHiQ339K6xSQMTMfOXnz38pKY9wKeDhuWZkhO4qZFRb+wyPLBAJC' + '2N3GAQxMeHTC0ROTvfwK8CPgLFAtl5R0RsPHnwhW3t9/cvfv3+npz' + '8mQy8wWL59+wuM2T9//ikp4Qt/rGjChBfwdHX48FeS9Nra3kNL0nv' + '3EhsIeno3f/36jZkpioqeE9QLTIpXrnzH1AsBFhYEAmHLlve49ALB' + 'o0c/ODhwpsPU1Md49ELA9u2fseo1MblFUC8EhIY+xNSOXETgBz9+/' + 'JKQQPHC5MmvidQLAZs2vYfrNTa+Q5JeCLCxgcbC/v1fyNC+bdsHoF' + '4bG/QERjyQkbk5f/5bsrUDSwP8CgDC3Xht'));
    'Diamands': result := getMufasaBitmap(BitmapFromString(18, 25, 'meJz7/x8nuHPnO25J7GDLlk82Nr' + 'dI0vL9+y9R0esMDFeWLHlHvK7w8EdALUDEynr19es/xGjZvv0DRAs' + 'EOTvfJ6jlw4dfQkLXkXUB0cKF7/HrcnG5j6YFgi5cwBmekya9wKoF' + 'iAwM7vz69RtTy+HDX3FpgSB//4doWt6+/Skqeg2/LnBEoHjQ0vIWQ' + 'S0QdPDgF4gWH5+HRGoBIj6+a/fu/ZwyBWcI4AmZ27d/cnFdJUlXU9' + 'MzoAuBTiVei6fnA3horFr1lhgtFhbouSAm5jF+Lfz8154//4EZ0eb' + 'm+MJ/z54PWFPU/fs/2Niwh0xb20tc6RAItm37jKmFmEwdEHAXWQsr' + '65WnT7F4Bw38+fNPRuYmXNfq1cQWArt3Q2PQze0BYdVIICTkESPjl' + 'SdPCLsNGQDzzuTJb3DJAgBQhIlP'));
  end;
end;

procedure clearDraw();
var
  i, l:Integer;
begin
for i := 0 to high(gameGraphics.myCards) do
  begin
    try
      with gameGraphics.myCards[i] do
        Free;
      with gameGraphics.pictures.cardBitmaps[i] do
        Free;
      with gameGraphics.pictures.bmps0[i] do
        Free;
      for l := 0 to high(gameGraphics.cardLetters[i]) do
      begin
        with gameGraphics.cardLetters[i][l] do
          Free;
      end;
    except
      Writeln('Exception in the index ' + ToStr(i));
    end;
  end;
end;

procedure canvasDrawCards();
var
  i, l:Integer;
begin
  clearDraw();
  setLength(gameGraphics.myCards, length(myPlayer.cards));
  for i := 0 to high(gameGraphics.myCards) do
  begin
    gameGraphics.myCards[i] := TShape.create(myBoard.main);
    with gameGraphics.myCards[i] do
    begin
      Parent := myBoard.main;
      pen.Color := 12632256;
      top := 150;
      left := 50 + (i * 100);
      height := 100;
    end;
  end;
  setLength(gameGraphics.cardLetters, length(myPlayer.cards));
  for i := 0 to high(myPlayer.cards) do
    setLength(gameGraphics.cardLetters[i], 2);
  for l := 0 to high(gameGraphics.cardLetters) do
  begin
    for i := 0 to high(gameGraphics.cardLetters[l]) do
    begin
      gameGraphics.cardLetters[l][i] := TLabel.create(myBoard.main);
      with gameGraphics.cardLetters[l][i] do
      begin
        parent := myBoard.main;
        Caption := firstLetter(TDeck[myPlayer.cards[l]].name)
        font.color := getCardColor(myPlayer.cards[l]);
        font.size := 12;
        top := (gameGraphics.myCards[l].top - 1) + (i * 80);
        left := (gameGraphics.myCards[l].left + 1) + (i * 50);
        if (TDeck[myPlayer.cards[l]].name = '10') then
          left := (gameGraphics.myCards[l].left + 1) + (i * 45);
      end;
    end;
  end;
  setLength(gameGraphics.pictures.cardBitmaps, length(myPlayer.cards));
  setLength(gameGraphics.pictures.bmps0, length(myPlayer.cards));
  setLength(gameGraphics.pictures.bmp0, length(myPlayer.cards));
  for i := 0 to high(myPlayer.cards) do
  begin
    gameGraphics.pictures.cardBitmaps[i] := TImage.Create(myBoard.main);
    gameGraphics.pictures.bmps0[i] := getCardImage(myPlayer.cards[i]);
    gameGraphics.pictures.bmp0[i] := gameGraphics.pictures.bmps0[i].ToTBitmap;
    with gameGraphics.pictures.cardBitmaps[i] do
      begin
        Parent := myBoard.main;
        Left := (Round(gameGraphics.myCards[i].left + 20));
        Top := (Round(gameGraphics.myCards[i].top + 35));
        Picture.Bitmap.handle := gameGraphics.pictures.bmp0[i].handle;
       // Width := 25;
        //Height := 25;
    end;
  end;
end;

function getCashColor:Integer;
begin
  result := 65535;
  if ((myPlayer.cash > 99999) and (myPlayer.cash < 9999999)) then
    result := 16777215;
  if ((myPlayer.cash > 9999999) and (myPlayer.cash < 9999999999)) then
    result := 8846345;
  if ((myPlayer.cash > 9999999999) and (myPlayer.cash < 9999999999999)) then
    result := 16646144;
  if ((myPlayer.cash > 9999999999999) and (myPlayer.cash < 9999999999999999)) then
    result := 65776;
  if ((myPlayer.cash > 9999999999999999) and (myPlayer.cash <=9223372036854775807)) then
    result := 16187817;
end;

procedure clearCashAmount();
begin
  try
    gameGraphics.cashLabel.Free;
  except
    Writeln('');
  end;
end;

procedure canvasDrawCashAmount();
begin
  gameGraphics.cashLabel := TLabel.Create(myBoard.main);
  with gameGraphics.cashLabel do
  begin
    Parent := myBoard.main;
    left := gameGraphics.pictures.cashBitmap.left;
    top := gameGraphics.pictures.cashBitmap.top + - 15;
    font.color := getCashColor();
    Caption := cashString();
  end;
end;

procedure canvasDrawCash();
begin
 // cashBitmap:TImage;
  //cashBmps0:TMufasaBitmap;
  //cashBmp0:TBitmap;
  gameGraphics.pictures.cashBitmap := TImage.Create(myBoard.main);
  gameGraphics.pictures.cashBmp0 := gameGraphics.pictures.cashbmps0.ToTBitmap();
  with gameGraphics.pictures.cashBitmap do
  begin
    Parent := myBoard.main;
    Left := 400;
    Top := 400;
    Picture.Bitmap.handle := gameGraphics.pictures.cashBmp0.handle;
  end;
end;

procedure FuckYou(sender:TObject);
var
  reply:Integer;
begin
  case sender of
    myBoard.menuLabels[0]: newPlayer();
    myBoard.menuLabels[2]: loadPlayers();
    myBoard.menuLabels[1]:
    begin
      if (myPlayer.name <> '') then
      begin
        reply := MessageBox('Start game ' + myPlayer.name + '?', 'Start Game',1);
        case reply of
          0: Writeln('Cancelled');
          1:
          begin
            try
              myBoard.menu.CLOSE;
            except
              Writeln('Error freeing menu form');
            finally
              canvasDrawCash();
              canvasDrawCashAmount();
              canvasDrawCards();
              myBoard.main.showModal;
            end;
          end;
        end;
      end else if (myPlayer.name = '') then
        MessageBox('You must first load a player!', 'Error', 8);
    end;
    myBoard.menuLabels[3]: openWebPage('http://www.pagat.com/banking/blackjack.html');
    myBoard.menuLabels[4]:
    begin
      Writeln('==');
      Writeln(myPlayer);
    end;
    myBoard.loadPlayerLabels[0]:
    begin
      case (myBoard.loadedPlayers.ITEMINDEX > - 1) of
        True:
        case loadGame(myBoard.loadedPlayers.ITEMS.Strings[myBoard.loadedPlayers.ITEMINDEX]) of
          True:
          begin
            Writeln('Loaded player ' + myPlayer.name);
            myBoard.load.CLOSE;
          end;
          False: Writeln('Error loading player file ' + myBoard.loadedPlayers.ITEMS.Strings[myBoard.loadedPlayers.ITEMINDEX] + ' file may be corrupt!');
        end;
        False: MessageBox('No player selected!', 'Error', 8);
      end;
    end;
    myBoard.loadPlayerLabels[1]:
  end;
end;

procedure handleRequest(sender:TObject);
var
  cash:string;
begin
  case sender of
    textFields.playerOptions[0]:
    begin
      InputQuery('Enter cash amount', 'Cheat', cash);
      try
        myPlayer.cash := StrToInt64(cash);
      except
        Writeln('Invalid number!');
      end;
      clearCashAmount();
      canvasDrawCashAmount();
    end;
    textFields.playerOptions[1]: clearDraw();
    textFields.playerOptions[2]:
    begin
      clearDraw();
      myPlayer.cards := [];
      initValid;
    end;
  end;
end;

procedure loadBoard();
var
  i:Integer;
  text:TStringArray;
begin
  myBoard.main := TForm.Create(nil);

  with myBoard.main do
  begin
    Caption := 'Black Jack';
    top := 200;
    left := 200;
    width := 670;
    height := 450;
    color := 2909715;
  end;

  text := ['Hit', 'Stand','Surrender'];
  for i := 0 to high(textFields.playerOptions) do
  begin
    textFields.playerOptions[i] := TLabel.create(myBoard.main);
    with textFields.playerOptions[i] do
    begin
      Parent := myBoard.main;
      Caption := text[i];
      font.color := 0;
      font.size := 14;
      onClick := @handleRequest;
      left := 200 + (i * 70);
      top := 300;
      Visible := false;
    end;
  end;

  text := ['Deal', 'Quit'];
  for i := 0 to high(textFields.newGameLabels) do
  begin
    textFields.newGameLabels[i] := TLabel.create(myBoard.main);
    with textFields.newGameLabels[i] do
    begin
      Parent := myBoard.main;
      Caption := text[i];
      font.color := 0;
      font.size := 14;
      //onClick := @handleRequest;
      left := 200 + (i * 70);
      top := 300;
      Visible := true;
    end;
  end;

//  playerOptions:Array[0..2] of TLabel;
 // newGameLabels:Array[0..1] of TLabel;


  myBoard.menu := TForm.Create(nil);
  with myBoard.menu do
  begin
    Caption := 'Black Jack';
    top := 200;
    left := 200;
    width := 450;
    height := 400;
    color := 10572865;
  end;

  myBoard.load := TForm.Create(nil);
  with myBoard.load do
  begin
    Caption := 'Select player';
    top := 250;
    left := 350;
    width := 400;
    height := 300;
    color := 10572865;
  end;

  text := ['Cash:', 'Wins:','Losses:','View cards'];
  for i := 0 to high(myBoard.playerInfo) do
  begin
    myBoard.playerInfo[i] := TLabel.create(myBoard.load);
    with myBoard.playerInfo[i] do
    begin
      Parent := myBoard.load;
      Caption := text[i];
      left := 190;
      top := 30 + (i * 40);
      if (i = 3) then
      begin
        left := 240;
        top := 170;
      end;
      font.size := 12;
      font.color := 0;
      font.name := 'Trajan Pro';
      onClick := @fuckYou;
      Visible := false;
    end;
  end;

  text := ['Load Player', 'Delete Player'];
  for i := 0 to high(myBoard.loadPlayerLabels) do
  begin
    myBoard.loadPlayerLabels[i] := TLabel.create(myBoard.load);
    with myBoard.loadPlayerLabels[i] do
    begin
      Parent := myBoard.load;
      Caption := text[i];
      left := 40 + (i * 170);
      top := 250;
      font.size := 12;
      font.color := 5;
      font.name := 'Trajan Pro';
      color := 16777215;
      onClick := @fuckYou;
    end;
  end;

  myBoard.loadedPlayers := TListBox.Create(myBoard.load);
  with myBoard.loadedPlayers do
  begin
      Parent := myBoard.load;
      Left := 25;
      Top := 10;
      Width := 140;
      Height := 180;
      PARENTCOLOR := false;
      FONT.Size := 11;
      font.name := 'Times new Roman';
      Color := 1844685;
      Onclick := @dispStats;
  end;

  text := ['New Game', 'Start Game', 'Load Player','Instructions','Quit'];
  for i := 0 to high(myBoard.menuLabels) do
  begin
    myBoard.menuLabels[i] := TLabel.create(myBoard.menu);
    with myBoard.menuLabels[i] do
    begin
      Parent := myBoard.menu;
      Caption := text[i];
      left := 145;
      top := 45 + (i * 70);
      font.size := 17;
      font.color := 1098086;
      case i of
        0: left := 152;
        3: left := 135;
        4: left := 180;
      end;
      font.name := 'Trajan Pro';
      onClick := @Fuckyou;
    end;
  end;
   //newPlayerLabel
  myBoard.new := TForm.Create(nil);
  with myBoard.new do
  begin
    Caption := 'New Player';
    top := 240;
    left := 270;
    width :=300;
    height := 200;
    color := 7590888;
  end;

  myBoard.newPlayerLabel := TLabel.Create(myBoard.new);
  with myBoard.newPlayerLabel do
  begin
    Parent := myBoard.new;
    caption := 'Create Player';
    top := 150;
    left := 95;
    font.size := 12;
    color := 16777215;
    onClick := @namePlayer;
  end;


  textFields.newEdit := Tedit.create(myBoard.new);
  with textFields.newEdit do
  begin
    parent := myBoard.new;
    top := 35;
    left := 75;
    width :=140;
    Height := 17;
    Caption := 'Enter nickname';
  end;
 // canvasDrawChips;
  updateFiles();

end;


procedure SafeInitForm;
var
  v: TVariantArray;
begin
  SetLength(V, 0);
  ThreadSafeCall('loadBoard', v);
end;

procedure ShowFormModal;
begin
  myBoard.menu.ShowModal;
end;

procedure SafeShowFormModal;
var
  v: TVariantArray;
begin
  SetLength(V, 0);
  ThreadSafeCall('ShowFormModal', v);
end;

begin
  inGame := false;
  loadBMP;
  AddOnTerminate('ClearDraw');
  AddOnTerminate('freeBMP');
  Types := ['Clubs', 'Spades', 'Hearts', 'Diamands'];
  Names := ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King'];
  loadDeck();
  initValid;
  if (not DirectoryExists((appPath + 'BlackJack'))) then
  begin
    if not ForceDirectories(appPath + 'BlackJack') then
    begin
      Writeln('Unable to create directories needed to run');
      Exit;
    end;
  end;
  SafeInitForm;
  SafeShowFormModal;
end.

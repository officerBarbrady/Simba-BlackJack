program dicingGame;



type Tcard = record
  cardType, name: string;
  value: Integer;
  active: Boolean;
  index:Integer;
end;

type player = record
  name:string;
  cash:Int64;
  wins, losses:Integer;
  upCards, downCards:TIntegerArray;
end;



var
  TDeck: array [0..51] of Tcard;
  validCards:TIntegerArray;
  names, types:TStringArray;
  i: Integer;
  myPlayer:player;
  placeHolder:string;

function getValue(card:string):Integer;
begin
  case card of
    '2': result := 2;
    '3': result := 3;
    '4': result := 4;
    '5': result := 5;
    '6': result := 6;
    '7': result := 7;
    '8': result := 8;
    '9': result := 9;
    '10', 'Jack', 'Queen','King': result := 10;
    'Ace': result := 11;
  end;
end;

function TIADelete(var TIA: TIntegerArray; x: Integer): Boolean;
var
  i, h: Integer;
begin
  h := High(TIA);
  Result := ((x <= h) and (x > -1));
  if not Result then
    Exit;
  for i := x to (h - 1) do
    TIA[i] := TIA[(i + 1)];
  SetLength(TIA, h);
end;

procedure TIAAppend(var TIA: TIntegerArray; x: Integer);
var
  aL: Integer;
begin
  aL := (Length(TIA) + 1);
  SetLength(TIA, aL);
  TIA[(aL - 1)] := Integer(x);
end;

procedure loadDeck;
var
  i, l, j: Integer;
begin
  for i := 0 to high(Names) do
  begin
    for l := 0 to high(Types) do
    begin
      TDeck[(i + j)].cardType := Types[l];
      TDeck[(i + j)].name := Names[i];
      TDeck[(i + j)].value := getValue(Names[i]);
      TDeck[(i + j)].index := (i + j);
      j := j + 1;
    end;
    j := j - 1
  end;
end;

function openUserFile(name:string): integer;
var
  fileName,Bot_SavePath: string;
begin

  Bot_SavePath := appPath + 'BlackJack\Profiles' // path
  if (not directoryExists(Bot_SavePath)) then // if it does not exist it will save else were
    forceDirectories(Bot_SavePath);

  fileName := name + '.txt'; // file name
  fileName := Bot_SavePath + fileName;


  try
    if (fileExists(fileName)) then // checks if the file exists
      result := appendFile(fileName)
    else
      result := createFile(fileName); // if it does not exist it creates it
  except
    Writeln('h');
  end;
end;
procedure saveFile(s, name:string);
var
  tmpFile: integer;
begin

  tmpFile := openUserFile(name);

  if (tmpFile >= 0) then
    try
     writeFileString(tmpFile, s);
    except
      Writeln('Error writing File');
    finally
      closeFile(tmpFile);
    end;
end;

function randomCard:TCard;
begin
  result := TDeck[random(52)];
end;

procedure drawCards(var TIA:TIntegerArray;amount:Integer);
var
  i, card, index:Integer;
begin
  for i := 0 to amount do
  begin
    index := random(length(validCards));
    card := validCards[index];
    TIAAppend(TIA, card);
    TIADelete(validCards, index);
  end;
end;

function cardTotal(cardArray:TIntegerArray):Integer;
var
  aceCount:Integer;
begin
  for i := 0 to high(cardArray) do
    result := result + TDeck[cardArray[i]].value;
  for i := 0 to high(cardArray) do
  begin
    if (TDeck[cardArray[i]].name = 'Ace') then
      aceCount := aceCount + 1;
  end;
  if (result > 21) then
  begin
    for i := 0 to aceCount do
    begin
      result := result - 10;
      if (result <= 21) then
        exit;
    end;
  end;
end;

function blackJack(cardArray:TIntegerArray):boolean;
begin
  result := (cardTotal(cardArray) = 21);
end;

procedure BetProc(str1, str2:string);
var
  bet:string;
begin
  InputQuery(str1, str2, bet);
  if ((myPlayer.cash - StrToInt64(bet)) < 1) then
  begin
  //  Writeln('You do not have that much money!(',(myPlayer.cash - StrToInt64(bet)),')');
   // betProc(str1, str2);
  end;
end;

procedure saveGame();
var
  s:String;
  tempFile:Integer;
begin
  tempFile := RewriteFile(appPath + 'BlackJack\Profiles\' + myPlayer.name + '.txt', True);
  try
    s := myPlayer.name;
    saveFile('[cash=]' + Int64ToStr(myPlayer.cash) + '[/cash]', s);
    saveFile('[name=]' + myPlayer.name + '[/name]', s);
    saveFile('[wins=]' + ToStr(myPlayer.wins) + '[/wins]', s);
    saveFile('[losses=]' + ToStr(myPlayer.losses) + '[/losses]', s);
    saveFile('[upcards=]' + ToStr(myPlayer.upCards) + '[/upcards]', s);
    saveFile('[downcards=]' + ToStr(myPlayer.downCards) + '[/downcards]', s);
  except
    Writeln('Error saving game');
  finally
    closeFile(tempFile);
  end;
end;

function loadGame(playerName:string):boolean;
var
  info:string;
  tmpFile:Integer;
begin
  tmpFile := openFile(appPath + 'BlackJack\Profiles\' + playerName + '.txt', true);
  ReadFileString(tmpFile, info, 250);
  Writeln(info);
  try
    myPlayer.cash := StrToInt64(Between('[cash=]', '[/cash]', info));
    myPlayer.name := Between('[name=]', '[/name]', info);
    myPlayer.wins := StrToInt(Between('[wins=]', '[/wins]', info));
    myPlayer.losses := StrToInt(Between('[losses=]', '[/losses]', info));
    myPlayer.upCards := [5];
    myPlayer.downCards := [4];
    result := true;
  except
    Writeln('Error loading player file!');
    result := false;
  finally
    closeFile(tmpFile);
  end;
end;

procedure startGame;
begin
  saveFile('==', myPlayer.name);
  myPlayer.cash := random(1000000) + 50000;
  saveGame();
  Writeln('====================================');
  Writeln('Starting cash: ' + ToStr(myPlayer.cash));
//  BetProc('Enter bet', 'Enter starting bet');
end;

function findFile(path, ext, name:string):boolean;
var
  s:TStringArray;
  i:Integer;
begin
  s := GetFiles(path, ext);
  for i := 0 to high(s) do
    result := (s[i] = (name +'.' + ext));
end;

procedure namePlayer();
begin
  Inputquery('Input name','What would you like your name to be?', myPlayer.name);
  if (myPlayer.name = '') then
  begin
    Writeln('You must enter a player name!');
    namePlayer();
  end;
end;
var
  g:Integer;
  cArray:TIntegerArray;
begin
  Types := ['Clubs', 'Spades', 'Hearts', 'Diamands'];
  Names := ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King'];
  loadDeck;
 // validCards := [0..51];
  if (not DirectoryExists((appPath + 'BlackJack/Profiles'))) then
  begin
    if not ForceDirectories(appPath + 'BlackJack/Profiles') then
    begin
      Writeln('Unable to create directories needed to run');
      Exit;
    end;
  end;
  if (not findFile(appPath + 'BlackJack\', 'txt', 'readme')) then
  begin
    Writeln('test 123');
   // AddInfo('', 'BlackJack/readme', False);
   // AddInfo('Instructions: http://en.wikipedia.org/wiki/Blackjack', 'BlackJack/readme', False);
  end;

  loadDeck;
  Inputquery('Open game','Open existing game(y/n)?', placeHolder);
  if (placeHolder = 'y') then
  begin
    Writeln('Found following files in App path: ' + ToStr(Getfiles(AppPath + 'BlackJack\Profiles\', 'txt')));
    InputQuery('Name', ' Name of player: ', placeHolder);
    if (not loadGame(placeHolder)) then
      Writeln('Error loading player file, please create a new player!');
  end;
  if (placeHolder <> 'y') then
    namePlayer();
  startGame();
end.

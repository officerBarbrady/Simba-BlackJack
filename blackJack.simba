program blackJack;



type Tcard = record
  cardType, name: string;
  value: Integer;
  active: Boolean;
  index:Integer;
end;

type player = record
  name:string;
  cash:Int64;
  wins, losses:Integer;
  cards:TIntegerArray;
end;

type gameBoard = record
  main, menu, load, new:TForm;
  menuLabels:Array[0..3] of TLabel;
  newPlayerLabel:TLabel;
  loadedPlayers:TListBox;
end;

type textField = record
  newEdit:TEdit;
  playerOptions:Array[0..2] of TLabel;
end;

type gameObject = record
  gameAvatars:Array[0..3] of Integer;
  myCards:Array of TShape;
  cardLetters:Array of TLabel;
end;


var
  TDeck: array [0..51] of Tcard;
  validCards:TIntegerArray;
  names, types:TStringArray;
  myPlayer:player;
  placeHolder:string;
  myBoard:gameBoard;
  gameGraphics:gameObject;
  textFields:textField;

procedure loadBMP;
begin
end;
function getValue(card:string):Integer;
begin
  case card of
    '2': result := 2;
    '3': result := 3;
    '4': result := 4;
    '5': result := 5;
    '6': result := 6;
    '7': result := 7;
    '8': result := 8;
    '9': result := 9;
    '10', 'Jack', 'Queen','King': result := 10;
    'Ace': result := 11;
  end;
end;

function TIADelete(var TIA: TIntegerArray; x: Integer): Boolean;
var
  i, h: Integer;
begin
  h := High(TIA);
  Result := ((x <= h) and (x > -1));
  if not Result then
    Exit;
  for i := x to (h - 1) do
    TIA[i] := TIA[(i + 1)];
  SetLength(TIA, h);
end;

procedure TIAAppend(var TIA: TIntegerArray; x: Integer);
var
  aL: Integer;
begin
  aL := (Length(TIA) + 1);
  SetLength(TIA, aL);
  TIA[(aL - 1)] := Integer(x);
end;

procedure loadDeck;
var
  i, l, j: Integer;
begin
  for i := 0 to high(Names) do
  begin
    for l := 0 to high(Types) do
    begin
      TDeck[(i + j)].cardType := Types[l];
      TDeck[(i + j)].name := Names[i];
      TDeck[(i + j)].value := getValue(Names[i]);
      TDeck[(i + j)].index := (i + j);
      j := j + 1;
    end;
    j := j - 1
  end;
end;

function openUserFile(name:string): integer;
var
  fileName,Bot_SavePath: string;
begin

  Bot_SavePath := appPath + 'BlackJack\Profiles' // path
  if (not directoryExists(Bot_SavePath)) then // if it does not exist it will save else were
    forceDirectories(Bot_SavePath);

  fileName := name + '.txt'; // file name
  fileName := Bot_SavePath + fileName;


  try
    if (fileExists(fileName)) then // checks if the file exists
      result := appendFile(fileName)
    else
      result := createFile(fileName); // if it does not exist it creates it
  except
    Writeln('h');
  end;
end;
procedure saveFile(s, name:string);
var
  tmpFile: integer;
begin

  tmpFile := openUserFile(name);

  if (tmpFile >= 0) then
    try
     writeFileString(tmpFile, s);
    except
      Writeln('Error writing File');
    finally
      closeFile(tmpFile);
    end;
end;

function randomCard:TCard;
begin
  result := TDeck[random(52)];
end;

procedure drawCards();
var
  index:Integer;
begin
  index := random(length(validCards));
  TIAAppend(myPlayer.cards, validCards[index]);
  TIADelete(validCards, index);
end;

function cardTotal(cardArray:TIntegerArray):Integer;
var
  aceCount, i:Integer;
begin
  for i := 0 to high(cardArray) do
    result := result + TDeck[cardArray[i]].value;
  for i := 0 to high(cardArray) do
  begin
    if (TDeck[cardArray[i]].name = 'Ace') then
      aceCount := aceCount + 1;
  end;
  if (result > 21) then
  begin
    for i := 0 to aceCount do
    begin
      result := result - 10;
      if (result <= 21) then
        exit;
    end;
  end;
end;

function blackJack(cardArray:TIntegerArray):boolean;
begin
  result := (cardTotal(cardArray) = 21);
end;

function saveGame():boolean;
var
  s:String;
  tempFile:Integer;
begin
  tempFile := RewriteFile(appPath + 'BlackJack\Profiles\' + myPlayer.name + '.txt', True);
  try
    s := myPlayer.name;
    saveFile('[cash=]' + Int64ToStr(myPlayer.cash) + '[/cash]', s);
    saveFile('[name=]' + myPlayer.name + '[/name]', s);
    saveFile('[wins=]' + ToStr(myPlayer.wins) + '[/wins]', s);
    saveFile('[losses=]' + ToStr(myPlayer.losses) + '[/losses]', s);
    saveFile('[cards=]' + ToStr(myPlayer.cards) + '[/cards]', s);
    result := true;
  except
    Writeln('Error saving game');
    result := false;
  finally
    closeFile(tempFile);
  end;
end;

function loadGame(playerName:string):boolean;
var
  info:string;
  tmpFile:Integer;
begin
  tmpFile := openFile(appPath + 'BlackJack\Profiles\' + playerName + '.txt', true);
  ReadFileString(tmpFile, info, 250);
  Writeln(info);
  try
    myPlayer.cash := StrToInt64(Between('[cash=]', '[/cash]', info));
    myPlayer.name := Between('[name=]', '[/name]', info);
    myPlayer.wins := StrToInt(Between('[wins=]', '[/wins]', info));
    myPlayer.losses := StrToInt(Between('[losses=]', '[/losses]', info));
    myPlayer.cards := [5];
    result := true;
  except
    Writeln('Error loading player file!');
    result := false;
  finally
    closeFile(tmpFile);
  end;
end;

procedure startGame();
begin
  saveFile('==', myPlayer.name);
  myPlayer.cash := random(1000000) + 50000;
  saveGame();
  Writeln('====================================');
  Writeln('Starting cash: ' + ToStr(myPlayer.cash));
//  BetProc('Enter bet', 'Enter starting bet');
end;

function findFile(path, ext, name:string):boolean;
var
  s:TStringArray;
  i:Integer;
begin
  s := GetFiles(path, ext);
  for i := 0 to high(s) do
    result := (s[i] = (name +'.' + ext));
end;

procedure newPlayer();
begin
  myBoard.new.SHOWMODAL;
end;

procedure namePlayer(sender:TObject);
begin
  if (sender = myBoard.newPlayerLabel) then
  begin
    if (textFields.newEdit.text = '') then
    begin
      MessageBox('You must enter in a name!', 'Error', 0);
      exit;
    end;
    myPlayer.name := textFields.newEdit.TEXT;
    if saveGame() then
      writeLn('Successfully saved: ' + appPath + 'BlackJack\Profiles\' + myPlayer.name + '.txt');
  end;
end;

procedure loadPlayers();
var
  tsa:TStringArray;
  i:Integer;
begin
  myBoard.load.SHOWMODAL;


end;

procedure FuckYou(sender:TObject);
begin
  case sender of
    myBoard.menuLabels[0]: newPlayer();
    myBoard.menuLabels[1]: loadPlayers();
    myBoard.menuLabels[2]: openWebPage('http://www.pagat.com/banking/blackjack.html');
    myBoard.menuLabels[3]: writeln('TODO');
  end;
end;

function getCardColor(id:Integer):Integer;
begin
  case lowerCase(TDeck[id].name) of
    'spade','club': result := 0;
    'heart','Diamands': result := 255;
  end;
end;

function firstLetter(str:string):string;
begin
  result := str[0];
end;

procedure canvasDrawCards;
var
  myLabels:Array[0..1] of TLabel;
  i:Integer;
begin
  drawCards();
  Writeln(myPlayer.cards);
  for i := 0 to high(gameGraphics.myCards) do
  begin
    try
      with gameGraphics.myCards[i] do
      begin
        visible := false;
        Free;
      end;
    except
      Writeln('Exception!');
    end;
  end;
  setLength(gameGraphics.myCards, length(myPlayer.cards));
  for i := 0 to high(gameGraphics.myCards) do
  begin
    gameGraphics.myCards[i] := TShape.create(myBoard.main);
    with gameGraphics.myCards[i] do
    begin
      Parent := myBoard.main;
      pen.Color := 12632256;
      top := 150;
      left := 50 + (i * 100);
      height := 100;
    end;
  end;
  setLength(gameGraphics.cardLetters, length(myPlayer.cards));
  for i := 0 to high(gameGraphics.cardLetters) do
  begin
    gameGraphics.cardLetters[i] := TLabel.create(myBoard.main);
    with gameGraphics.cardLetters[i] do
    begin
      parent := myBoard.main;
      Caption := TDeck[myPlayer.cards[i]].name[0];
      font.color := 55;//getCardColor(myPlayer.cards[i]);
      top := 50;
      left := 50 + (i * 50);
    end;
  end;
end;

procedure handleRequest(sender:TObject);
begin
  case sender of
    textFields.playerOptions[0]: canvasDrawCards;
  end;
end;

procedure loadBoard();
var
  i:Integer;
  text, tsa:TStringArray;
begin
  myBoard.main := TForm.Create(nil);

  with myBoard.main do
  begin
    Caption := 'Black Jack - by the capable Officer Barbrady';
    top := 200;
    left := 200;
    width := 670;
    height := 450;
    color := 2909715;
  end;

  text := ['Hit', 'Stay','Fold'];
  for i := 0 to high(textFields.playerOptions) do
  begin
    textFields.playerOptions[i] := TLabel.create(myBoard.main);
    with textFields.playerOptions[i] do
    begin
      Parent := myBoard.main;
      Caption := text[i];
      font.color := 0;
      onClick := @handleRequest;
      left := 50 + (i * 70);
      top := 100;
    end;
  end;

  myBoard.menu := TForm.Create(nil);
  with myBoard.menu do
  begin
    Caption := 'Black Jack - by the capable Officer Barbrady';
    top := 200;
    left := 200;
    width := 450;
    height := 400;
    color := 161526;
  end;

  myBoard.load := TForm.Create(nil);
  with myBoard.load do
  begin
    Caption := 'Load player - by the capable Officer Barbrady';
    top := 250;
    left := 350;
    width := 400;
    height := 300;
    color := 2500134;
  end;

  myBoard.loadedPlayers := TListBox.Create(myBoard.load);
  with myBoard.loadedPlayers do
  begin
      Parent := myBoard.load;
      Left := 40;
      Top := 60;
      Width := 140;
      Height := 200;
      PARENTCOLOR := false;
      FONT.Size := 11;
      font.name := 'Times new Roman';
     // Onclick := @Fuckyou;
  end;

  text := ['New Game', 'Select Player','Instructions','Quit'];
  for i := 0 to high(myBoard.menuLabels) do
  begin
    myBoard.menuLabels[i] := TLabel.create(myBoard.menu);
    with myBoard.menuLabels[i] do
    begin
      Parent := myBoard.menu;
      Caption := text[i];
      left := 165;
      top := 65 + (i * 70);
      font.size := 17;
      font.color := 1098086;
      if (i = 3) then
        left := 190;
      font.name := 'Cezanne';
      onClick := @Fuckyou;
    end;
  end;
   //newPlayerLabel
  myBoard.new := TForm.Create(nil);
  with myBoard.new do
  begin
    Caption := 'New Player - by the capable Officer Barbrady';
    top := 240;
    left := 270;
    width :=300;
    height := 200;
    color := 7590888;
  end;

  myBoard.newPlayerLabel := TLabel.Create(myBoard.new);
  with myBoard.newPlayerLabel do
  begin
    Parent := myBoard.new;
    caption := 'Create Player';
    top := 150;
    left := 95;
    font.size := 12;
    color := 16777215;
    onClick := @namePlayer;
  end;


  textFields.newEdit := Tedit.create(myBoard.new);
  with textFields.newEdit do
  begin
    parent := myBoard.new;
    top := 35;
    left := 75;
    width :=140;
    Height := 17;
    Caption := 'Enter nickname';
  end;

  tsa := Getfiles(AppPath + 'BlackJack\Profiles\', 'txt');
  for i := 0 to high(tsa) do
    myBoard.loadedPlayers.ITEMS.Add(replace(tsa[i], '.txt', '', [rfReplaceAll]));

end;


procedure SafeInitForm;
var
  v: TVariantArray;
begin
  SetLength(V, 0);
  ThreadSafeCall('loadBoard', v);
end;

procedure ShowFormModal;
begin
  myBoard.main.ShowModal;

end;

procedure SafeShowFormModal;
var
  v: TVariantArray;
begin
  SetLength(V, 0);
  ThreadSafeCall('ShowFormModal', v);
end;

procedure initValid;
var
  i:Integer;
begin
  setLength(validCards, 52);
  for i := 0 to high(validCards) do
    validCards[i] := i;
end;

begin
  Types := ['Clubs', 'Spades', 'Hearts', 'Diamands'];
  Names := ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack', 'Queen', 'King'];
  loadDeck();
  initValid;
  SafeInitForm;
  SafeShowFormModal;
 {
  if (not DirectoryExists((appPath + 'BlackJack/Profiles'))) then
  begin
    if not ForceDirectories(appPath + 'BlackJack/Profiles') then
    begin
      Writeln('Unable to create directories needed to run');
      Exit;
    end;
  end;
  if (not findFile(appPath + 'BlackJack\', 'txt', 'readme')) then
  begin
    Writeln('test 123');
   // AddInfo('', 'BlackJack/readme', False);
   // AddInfo('Instructions: http://en.wikipedia.org/wiki/Blackjack', 'BlackJack/readme', False);
  end;

  loadDeck;
  Inputquery('Open game','Open existing game(y/n)?', placeHolder);
  if (placeHolder = 'y') then
  begin
    Writeln('Found following files in App path: ' + ToStr(Getfiles(AppPath + 'BlackJack\Profiles\', 'txt')));
    InputQuery('Name', ' Name of player: ', placeHolder);
    if (not loadGame(placeHolder)) then
      Writeln('Error loading player file, please create a new player!');
  end;
  if (placeHolder <> 'y') then
    namePlayer();
  startGame(); }
end.
